namespace ModelBuilder.ValueGenerators
{
    using System;
    using System.Reflection;
    using ModelBuilder.TypeCreators;

    /// <summary>
    ///     The <see cref="IValueGenerator" />
    ///     interface defines the members for generating values.
    /// </summary>
    /// <remarks>
    ///     Values generated by <see cref="IValueGenerator" /> are different to types created by <see cref="ITypeCreator" /> in
    ///     that they do not have their properties set after construction.
    ///     Value types and immutable types (strings for example) should use <see cref="IValueGenerator" /> to create them
    ///     rather than <see cref="ITypeCreator" />.
    /// </remarks>
    public interface IValueGenerator
    {
        /// <summary>
        ///     Generates a new value of the specified type.
        /// </summary>
        /// <param name="executeStrategy">The execution strategy.</param>
        /// <param name="type">The type of value to generate.</param>
        /// <returns>A new value of the type.</returns>
        object Generate(IExecuteStrategy executeStrategy, Type type);

        /// <summary>
        ///     Generates a new value of the specified type.
        /// </summary>
        /// <param name="executeStrategy">The execution strategy.</param>
        /// <param name="propertyInfo">The property to generate the value for.</param>
        /// <returns>A new value of the type.</returns>
        object Generate(IExecuteStrategy executeStrategy, PropertyInfo propertyInfo);

        /// <summary>
        ///     Generates a new value of the specified type.
        /// </summary>
        /// <param name="executeStrategy">The execution strategy.</param>
        /// <param name="parameterInfo">The parameter to generate the value for.</param>
        /// <returns>A new value of the type.</returns>
        object Generate(IExecuteStrategy executeStrategy, ParameterInfo parameterInfo);

        /// <summary>
        ///     Returns whether the specified type matches this generator.
        /// </summary>
        /// <param name="buildChain">The chain of instances built up to this point.</param>
        /// <param name="type">The type to evaluate.</param>
        /// <returns><c>true</c> if the type matches this generator; otherwise <c>false</c>.</returns>
        bool IsMatch(IBuildChain buildChain, Type type);

        /// <summary>
        ///     Returns whether the specified property matches this generator.
        /// </summary>
        /// <param name="buildChain">The chain of instances built up to this point.</param>
        /// <param name="propertyInfo">The property to generate the value for.</param>
        /// <returns><c>true</c> if the property matches this generator; otherwise <c>false</c>.</returns>
        bool IsMatch(IBuildChain buildChain, PropertyInfo propertyInfo);

        /// <summary>
        ///     Returns whether the specified parameter matches this generator.
        /// </summary>
        /// <param name="buildChain">The chain of instances built up to this point.</param>
        /// <param name="parameterInfo">The parameter to generate the value for.</param>
        /// <returns><c>true</c> if the parameter matches this generator; otherwise <c>false</c>.</returns>
        bool IsMatch(IBuildChain buildChain, ParameterInfo parameterInfo);

        /// <summary>
        ///     Gets the priority for this generator.
        /// </summary>
        int Priority { get; }
    }
}